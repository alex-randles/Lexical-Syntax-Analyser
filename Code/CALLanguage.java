/* Generated By:JJTree&JavaCC: Do not edit this line. CALLanguage.java */
import java.io.*;
import java.util.*;

public class CALLanguage/*@bgen(jjtree)*/implements CALLanguageTreeConstants, CALLanguageConstants {/*@bgen(jjtree)*/
  protected static JJTCALLanguageState jjtree = new JJTCALLanguageState();public static String scope = "Global"; //Scope for symbol table
  public static int FunctionParameterCount = 0;
  public static STC SymbolTable = new STC(); //Initialse SymbolTable Class
  public static void main(String[] args) throws ParseException, FileNotFoundException
  {


    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }


   try {
    CALLanguage parser = new CALLanguage(new FileInputStream(args[0]));

    SimpleNode root = parser.program();

    //Print Abstract Syntax Tree 
    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    //Symbol Table 
    SymbolTable.printSymbolTable(); //Call SymbolTable class print function

        SemanticCheckVisitor SemanticVisitor = new SemanticCheckVisitor();
    root.jjtAccept(SemanticVisitor, SymbolTable);

    //ThreeAddressCode
     TAC tc = new TAC();
     root.jjtAccept(tc, null);


    }

    catch (ParseException e){

          System.out.println(e.getMessage());
          System.out.println("Encoutered errors during parsing");


    }

  }

/*****PRODUCTION RULES********/

/*1*/
  static final public SimpleNode program() throws ParseException {
                              /*@bgen(jjtree) Prog */
  Prog jjtn000 = new Prog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclList();
      FuncList();
      Main();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DeclList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case CONSTANT:
      Decl();
      jj_consume_token(SEMI_COLON);
      DeclList();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  static final public void Decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      VarDecl();
      break;
    case CONSTANT:
      ConstDecl();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarDecl() throws ParseException {
                           /*@bgen(jjtree) VarDecl */
                           VarDecl jjtn000 = new VarDecl(JJTVARDECL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VARIABLE);
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     SymbolTable.add("Variable",id, type,scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ConstDecl() throws ParseException {
                               /*@bgen(jjtree) ConstDecl */
                               ConstDecl jjtn000 = new ConstDecl(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONSTANT);
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      ConstAssign();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     SymbolTable.add("Constant",id, type,scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ConstAssign() throws ParseException {
                      Token t;
    t = jj_consume_token(ASSIGNMENT);
    Expr();
                              ConstAssign jjtn001 = new ConstAssign(JJTCONSTASSIGN);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
    try {
                              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                              jjtc001 = false;
                             jjtn001.value = t.image;
    } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                              }
    }
  }

  static final public void FuncList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:
      Func();
      FuncList();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void Func() throws ParseException {
                     /*@bgen(jjtree) Func */
                     Func jjtn000 = new Func(JJTFUNC);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);String id; String type;
    try {
   FuncRet jjtn001 = new FuncRet(JJTFUNCRET);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
      try {
        type = Type();
        id = Identifier();
                                   scope=id;
                                              SymbolTable.add("Function",id, type,id);SymbolTable.add("Function",id, type,"Global");
        jj_consume_token(LBR);
        ParamList();
                    SymbolTable.addFunctionParameterCount(id,FunctionParameterCount);FunctionParameterCount = 0;
        jj_consume_token(RBR);
        jj_consume_token(IS);
        DeclList();
        jj_consume_token(BEGIN);
        StmBlk();
        jj_consume_token(RETURN);
        jj_consume_token(LBR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LBR:
        case MINUS_SIGN:
        case INTEGERS:
        case IDENTIFIER:
          Expr();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(RBR);
        jj_consume_token(SEMI_COLON);
        jj_consume_token(END);
      } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
      } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  1);
   }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ParamList() throws ParseException {
                               /*@bgen(jjtree) ParamList */
  ParamList jjtn000 = new ParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        NempParamList();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NempParamList() throws ParseException {
                                       /*@bgen(jjtree) NempParamList */
                                       NempParamList jjtn000 = new NempParamList(JJTNEMPPARAMLIST);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);String id; String type;Token t;
    try {
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      NempParamListPrime();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     SymbolTable.add("Parameter",id, type,scope);FunctionParameterCount++;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NempParamListPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NempParamList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void Main() throws ParseException {
                     /*@bgen(jjtree) Main */
                     Main jjtn000 = new Main(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
     scope = "Main";
      t = jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      DeclList();
      StmBlk();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StmBlk() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case SKP:
    case WHILE:
    case BEGIN:
    case IDENTIFIER:
      Stm();
      StmBlk();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  static final public void Stm() throws ParseException {
              Token t;String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENT:
                          Assign jjtn001 = new Assign(JJTASSIGN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          t = jj_consume_token(ASSIGNMENT);
          Expr();
          jj_consume_token(SEMI_COLON);
                                                                jjtree.closeNodeScope(jjtn001,  2);
                                                                jjtc001 = false;
                                                               jjtn001.value = t.image;
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
        break;
      case LBR:
        t = jj_consume_token(LBR);
        ArgList();
        jj_consume_token(RBR);
        jj_consume_token(SEMI_COLON);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      StmBlk();
      jj_consume_token(BEGIN);
      break;
    case IF:
      If jjtn003 = new If(JJTIF);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        t = jj_consume_token(IF);
        Cond();
        jj_consume_token(BEGIN);
        StmBlk();
                                          Else jjtn002 = new Else(JJTELSE);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(END);
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
        }
        jj_consume_token(ELSE);
        jj_consume_token(BEGIN);
        StmBlk();
        jj_consume_token(END);
                                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                                     jjtc003 = false;
                                                                                    jjtn003.value = t.image;
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
      break;
    case WHILE:
      While jjtn004 = new While(JJTWHILE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        t = jj_consume_token(WHILE);
        Cond();
        jj_consume_token(BEGIN);
        StmBlk();
        jj_consume_token(END);
                                                  jjtree.closeNodeScope(jjtn004, true);
                                                  jjtc004 = false;
                                                 jjtn004.value = t.image;
      } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
      } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
      }
      break;
    case SKP:
      jj_consume_token(SKP);
      jj_consume_token(SEMI_COLON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS_SIGN:
    case INTEGERS:
    case IDENTIFIER:
      Frag();
      Term();
      break;
    case LBR:
      jj_consume_token(LBR);
      Expr();
      jj_consume_token(RBR);
      Term();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Term() throws ParseException {
               Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
      t = jj_consume_token(PLUS_SIGN);
      Expr();
                             PlusOp jjtn001 = new PlusOp(JJTPLUSOP);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtc001 = false;
                            jjtn001.value = t.image;
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
      }
      break;
    case MINUS_SIGN:
      t = jj_consume_token(MINUS_SIGN);
      Expr();
                              MinOp jjtn002 = new MinOp(JJTMINOP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                             jjtn002.value = t.image;
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
      }
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void Frag() throws ParseException {
               String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBR:
        jj_consume_token(LBR);
        ArgList();
        jj_consume_token(RBR);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case MINUS_SIGN:
      jj_consume_token(MINUS_SIGN);
      Identifier();
      break;
    case INTEGERS:
      Num();
      break;
    case TRUE:
    case FALSE:
      Bool();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Num() throws ParseException {
                   /*@bgen(jjtree) Num */
                   Num jjtn000 = new Num(JJTNUM);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGERS);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Bool() throws ParseException {
                     /*@bgen(jjtree) Bool */
                     Bool jjtn000 = new Bool(JJTBOOL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Cond() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATION:
      jj_consume_token(NEGATION);
      Cond();
      CondPrime();
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(LBR);
        Cond();
        jj_consume_token(RBR);
        CondPrime();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LBR:
        case MINUS_SIGN:
        case INTEGERS:
        case IDENTIFIER:
          Expr();
          CompOp();
          CondPrime();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void CondPrime() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
      Cond();
                      OrOp jjtn001 = new OrOp(JJTOROP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                     jjtn001.value = t.image;
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
      }
      break;
    case AND:
      t = jj_consume_token(AND);
      Cond();
                       AndOp jjtn002 = new AndOp(JJTANDOP);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
      try {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtc002 = false;
                      jjtn002.value = t.image;
      } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
      }
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void CompOp() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      t = jj_consume_token(EQUALS);
      Expr();
                          EqOp jjtn001 = new EqOp(JJTEQOP);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtc001 = false;
                         jjtn001.value = t.image;
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
      break;
    case NOT_EQUALS:
      t = jj_consume_token(NOT_EQUALS);
      Expr();
                              NotOp jjtn002 = new NotOp(JJTNOTOP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                             jjtn002.value = t.image;
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
      }
      break;
    case LESS_THEN:
      t = jj_consume_token(LESS_THEN);
      Expr();
                             LtOp jjtn003 = new LtOp(JJTLTOP);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
      try {
                             jjtree.closeNodeScope(jjtn003,  2);
                             jjtc003 = false;
                            jjtn003.value = t.image;
      } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003,  2);
                             }
      }
      break;
    case LESS_EQUAL:
      t = jj_consume_token(LESS_EQUAL);
      Expr();
                              LtEqOp jjtn004 = new LtEqOp(JJTLTEQOP);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
      try {
                              jjtree.closeNodeScope(jjtn004,  2);
                              jjtc004 = false;
                             jjtn004.value = t.image;
      } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004,  2);
                              }
      }
      break;
    case GRT_THEN:
      t = jj_consume_token(GRT_THEN);
      Expr();
                            GtOp jjtn005 = new GtOp(JJTGTOP);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
      try {
                            jjtree.closeNodeScope(jjtn005,  2);
                            jjtc005 = false;
                           jjtn005.value = t.image;
      } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005,  2);
                            }
      }
      break;
    case GRT_EQUAL:
      t = jj_consume_token(GRT_EQUAL);
      Expr();
                             GtEqOp jjtn006 = new GtEqOp(JJTGTEQOP);
                             boolean jjtc006 = true;
                             jjtree.openNodeScope(jjtn006);
      try {
                             jjtree.closeNodeScope(jjtn006,  2);
                             jjtc006 = false;
                            jjtn006.value = t.image;
      } finally {
                             if (jjtc006) {
                               jjtree.closeNodeScope(jjtn006,  2);
                             }
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArgList() throws ParseException {
                           /*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        NempArgList();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NempArgList() throws ParseException {
        ArgList jjtn001 = new ArgList(JJTARGLIST);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
    try {
      Identifier();
    } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
    } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NempArgList();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public String Identifier() throws ParseException {
                                   /*@bgen(jjtree) identifier */
                                   identifier jjtn000 = new identifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Type() throws ParseException {
                       /*@bgen(jjtree) type */
                       type jjtn000 = new type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      case VOID:
        t = jj_consume_token(VOID);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_22() {
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(PLUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(GRT_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(GRT_THEN)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(LESS_THEN)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(NOT_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(NEGATION)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_2()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_3()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(INTEGERS)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CALLanguageTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x1800,0x1800,0x1c000,0x80500000,0x0,0x10000000,0x1a40000,0xc0000000,0x1a40000,0x80500000,0x0,0x80000000,0x500000,0x500000,0x0,0x80500000,0x0,0x0,0x0,0x10000000,0x1c000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x9004,0x8000,0x0,0x8000,0x0,0x8000,0x9004,0x6,0x0,0x9004,0x0,0x8,0x9004,0x30,0xfc0,0x8000,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CALLanguage(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CALLanguage(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CALLanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CALLanguage(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CALLanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CALLanguage(CALLanguageTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CALLanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
