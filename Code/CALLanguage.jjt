/*****OPTIONS********/
options
{
  IGNORE_CASE = false;
  MULTI=true;
  VISITOR = true;
  NODE_PREFIX = "";
  //DEBUG_PARSER = true; 
  NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(CALLanguage)

import java.io.*;
import java.util.*;

public class CALLanguage
{
  public static String scope = "Global"; //Scope for symbol table
  public static int FunctionParameterCount = 0; 
  public static STC SymbolTable = new STC(); //Initialse SymbolTable Class
  public static void main(String[] args) throws ParseException, FileNotFoundException
  {

      
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

  
   try {
    CALLanguage parser = new CALLanguage(new FileInputStream(args[0]));

    SimpleNode root = parser.program();
    
    //Print Abstract Syntax Tree 
    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    //Symbol Table 
    SymbolTable.printSymbolTable(); //Call SymbolTable class print function

	SemanticCheckVisitor SemanticVisitor = new SemanticCheckVisitor();
    root.jjtAccept(SemanticVisitor, SymbolTable);

    //ThreeAddressCode
     TAC tc = new TAC();
     root.jjtAccept(tc, null);
	
    
    }
    
    catch (ParseException e){
          
          System.out.println(e.getMessage());
          System.out.println("Encoutered errors during parsing");


    }
   
  }
}

PARSER_END(CALLanguage)

/*****TOKENS******/


TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
    public static int linenumber = 0;


}

SKIP : /*STRUCTURES AND CHARACTERS TO SCAPE*/
{
 " "
|  "\t"
|  "\n" {linenumber++;}
|  "\r"
|  "\f"
}

SKIP : /* NESTED_COMMENTS */
{
  "/*" { commentNesting++; } : IN_COMMENT
}
  <IN_COMMENT> SKIP :
{
  "/*" { commentNesting++; }
| "*/" { commentNesting--;
  if (commentNesting == 0)
    SwitchTo(DEFAULT);
}
| <~[]>
}

SKIP : /* NON NESTED COMMENTS */ 
{
  < "//" (~["\n"])* "\n" >
}


TOKEN : /* RESERVED WORDS  */ 
{
    <VARIABLE: "variable">
|   <CONSTANT: "constant">
|   <RETURN: "return">
|   <INTEGER: "integer">
|   <BOOLEAN: "boolean">
|   <VOID: "void">
|   <MAIN: "main">
|   <IF: "if">
|   <ELSE : "else">
|   <TRUE: "true">
|   <SKP: "skip">
|   <FALSE: "false">
|   <WHILE: "while">
|   <BEGIN: "begin">
|   <END: "end">
|   <IS: "is">
}

TOKEN : /* KEYWORDS AND PUNCTUATION */ 
{
    < SEMI_COLON : ";" > 
|   < COMMA : "," >
|   < COLON : ":" >
|   < ASSIGNMENT : ":=" > 
|   < LBR : "(" >
|   < RBR : ")" >
|   < PLUS_SIGN : "+" >
|   < MINUS_SIGN : "-" > 
|   < NEGATION : "~" >
|   < OR : "|" >
|   < AND : "&" >
|   < EQUALS : "=" >
|   < NOT_EQUALS : "!=" >
|   < LESS_THEN : "<" > 
|   < GRT_THEN : ">" >
|   < LESS_EQUAL : "<=" >
|   < GRT_EQUAL : ">=" >

}



TOKEN : /* Integers and Identifiers */
{
  < INTEGERS : "0" | ((<MINUS_SIGN>)? <NEGATIVE_DIGITS> (<DIGITS>)*)>
| < #DIGITS : ["0" - "9"] >
| < #NEGATIVE_DIGITS : ["1" - "9"] > 
| < IDENTIFIER : <LETTER> (<LETTER> | <DIGITS> | "_")* >
| < #LETTER : ["a" - "z", "A" - "Z"] >
}



TOKEN : /* Not recongnised */ 
{
    
  < OTHER : ~[] >

}
 


/*****PRODUCTION RULES********/

/*1*/ 

SimpleNode program() #Prog : {}
{
    DeclList()
    FuncList()
    Main() [<EOF>] //NOT STATED IF NEEDED ADDED INCASE
     {return jjtThis;}
}

void DeclList() : {}
{
    Decl() <SEMI_COLON> DeclList()
  | {}
}

void Decl() : {}
{
    VarDecl()
  | ConstDecl()
}

void VarDecl() #VarDecl : {Token t; String id; String type;}
{
    t = <VARIABLE> id = Identifier() <COLON> type = Type() 
    {SymbolTable.add("Variable",id, type,scope);}  //Add variable to SymbolTable 
}

void ConstDecl() #ConstDecl : {Token t; String id; String type;}
{
    t = <CONSTANT> id = Identifier() <COLON> type = Type() ConstAssign() 
    {SymbolTable.add("Constant",id, type,scope);} 
}

void ConstAssign() : {Token t;}
{
    t = <ASSIGNMENT> Expr() {jjtThis.value = t.image;} #ConstAssign(>1)
}

void FuncList() : {}
{
    [Func() FuncList()]
}

void Func() #Func : {String id; String type;}
{
 (type = Type() id = Identifier() {scope=id;}{SymbolTable.add("Function",id, type,id);SymbolTable.add("Function",id, type,"Global");}
<LBR>  ParamList() {SymbolTable.addFunctionParameterCount(id,FunctionParameterCount);FunctionParameterCount = 0;}<RBR>  <IS>  DeclList() <BEGIN> StmBlk()  <RETURN> <LBR> [Expr() ] <RBR> <SEMI_COLON>  <END>  ) #FuncRet(1)

}



void ParamList() #ParamList : {}
{
    [NempParamList()]
}

void NempParamList() #NempParamList : {String id; String type;Token t;}
{
    (id = Identifier() <COLON> type = Type() NempParamListPrime())
    {SymbolTable.add("Parameter",id, type,scope);FunctionParameterCount++;}
}

void NempParamListPrime() : {}
{
    [<COMMA> NempParamList()] 
}

void Main() #Main : {Token t;}
{
    {scope = "Main";} t = <MAIN> <BEGIN> DeclList() StmBlk() <END>
}

void StmBlk() : {}
{
    Stm() StmBlk()
  | {}
}
void Stm() : {Token t;String id;}
{
    (id = Identifier() ((t = <ASSIGNMENT> Expr() <SEMI_COLON> {jjtThis.value = t.image;}) #Assign(2)|  (t= <LBR> ArgList()  <RBR> <SEMI_COLON> ))) 
  | (<BEGIN> StmBlk() <BEGIN>)
  | (t =  <IF>  Cond() <BEGIN> StmBlk() <END>  #Else <ELSE> <BEGIN> StmBlk() <END> {jjtThis.value = t.image;}) #If
  | (t = <WHILE>  Cond() <BEGIN> StmBlk() <END> {jjtThis.value = t.image;}) #While
  | (<SKP> <SEMI_COLON>)
}




void Expr() : {}
{
    (Frag() Term())  
  | (<LBR> Expr() <RBR> Term()) 
}

void Term() : {Token t;}
{
    t = <PLUS_SIGN> Expr() {jjtThis.value = t.image;} #PlusOp(2)
  | t = <MINUS_SIGN> Expr() {jjtThis.value = t.image;} #MinOp(2)
  | {}
}

void Frag() : {String id;}
{
    (id = Identifier() [<LBR> ArgList() <RBR>]  )
  | (<MINUS_SIGN> Identifier())
  | Num()
  | Bool()
}

void Num() #Num : {Token t;}
{
    t = <INTEGERS> {jjtThis.value = t.image;}
}

void Bool() #Bool : {Token t;}
{
    (t = <TRUE> | t = <FALSE>) {jjtThis.value = t.image;}
}

void Cond() : {}
{
    (<NEGATION> Cond() CondPrime())
  | LOOKAHEAD(3) (<LBR> Cond() <RBR> CondPrime())
  | (Expr() CompOp() CondPrime())
}

void CondPrime() : {Token t;}
{
    t = <OR> Cond() {jjtThis.value = t.image;} #OrOp(2)
  | t = <AND> Cond() {jjtThis.value = t.image;} #AndOp(2) 
  | {}
}

void CompOp() : {Token t;}
{
    t = <EQUALS> Expr() {jjtThis.value = t.image;} #EqOp(2)
  | t = <NOT_EQUALS> Expr() {jjtThis.value = t.image;} #NotOp(2)
  | t = <LESS_THEN> Expr() {jjtThis.value = t.image;} #LtOp(2)
  | t = <LESS_EQUAL> Expr() {jjtThis.value = t.image;} #LtEqOp(2)
  | t = <GRT_THEN> Expr() {jjtThis.value = t.image;} #GtOp(2)
  | t = <GRT_EQUAL> Expr() {jjtThis.value = t.image;} #GtEqOp(2)
}

void ArgList() #ArgList : {}
{
    [NempArgList()  ] 
}

void NempArgList()    : {}
{
      Identifier()  #ArgList(>1)  [<COMMA> NempArgList() ] 
}

String Identifier() #identifier : {Token t;}
{
    t = <IDENTIFIER> {jjtThis.value = t.image; return t.image;}
}

String Type() #type : {Token t;}
{
  ( t = <INTEGER> 
  | t = <BOOLEAN>
  | t = <VOID>
  )
  { jjtThis.value = t.image; return t.image; }
}
