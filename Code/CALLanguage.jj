/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CALLanguage.jj */
/*@egen*//*****OPTIONS********/
options
{
  IGNORE_CASE = false;
             
                 
                   
                         
                           
}

PARSER_BEGIN(CALLanguage)

import java.io.*;
import java.util.*;

public class CALLanguage/*@bgen(jjtree)*/implements CALLanguageTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCALLanguageState jjtree = new JJTCALLanguageState();

/*@egen*/
  public static String scope = "Global"; //Scope for symbol table
  public static int FunctionParameterCount = 0; 
  public static STC SymbolTable = new STC(); //Initialse SymbolTable Class
  public static void main(String[] args) throws ParseException, FileNotFoundException
  {

      
    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

  
   try {
    CALLanguage parser = new CALLanguage(new FileInputStream(args[0]));

    SimpleNode root = parser.program();
    
    //Print Abstract Syntax Tree 
    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    //Symbol Table 
    SymbolTable.printSymbolTable(); //Call SymbolTable class print function

	SemanticCheckVisitor SemanticVisitor = new SemanticCheckVisitor();
    root.jjtAccept(SemanticVisitor, SymbolTable);

    //ThreeAddressCode
     TAC tc = new TAC();
     root.jjtAccept(tc, null);
	
    
    }
    
    catch (ParseException e){
          
          System.out.println(e.getMessage());
          System.out.println("Encoutered errors during parsing");


    }
   
  }
}

PARSER_END(CALLanguage)

/*****TOKENS******/


TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
    public static int linenumber = 0;


}

SKIP : /*STRUCTURES AND CHARACTERS TO SCAPE*/
{
 " "
|  "\t"
|  "\n" {linenumber++;}
|  "\r"
|  "\f"
}

SKIP : /* NESTED_COMMENTS */
{
  "/*" { commentNesting++; } : IN_COMMENT
}
  <IN_COMMENT> SKIP :
{
  "/*" { commentNesting++; }
| "*/" { commentNesting--;
  if (commentNesting == 0)
    SwitchTo(DEFAULT);
}
| <~[]>
}

SKIP : /* NON NESTED COMMENTS */ 
{
  < "//" (~["\n"])* "\n" >
}


TOKEN : /* RESERVED WORDS  */ 
{
    <VARIABLE: "variable">
|   <CONSTANT: "constant">
|   <RETURN: "return">
|   <INTEGER: "integer">
|   <BOOLEAN: "boolean">
|   <VOID: "void">
|   <MAIN: "main">
|   <IF: "if">
|   <ELSE : "else">
|   <TRUE: "true">
|   <SKP: "skip">
|   <FALSE: "false">
|   <WHILE: "while">
|   <BEGIN: "begin">
|   <END: "end">
|   <IS: "is">
}

TOKEN : /* KEYWORDS AND PUNCTUATION */ 
{
    < SEMI_COLON : ";" > 
|   < COMMA : "," >
|   < COLON : ":" >
|   < ASSIGNMENT : ":=" > 
|   < LBR : "(" >
|   < RBR : ")" >
|   < PLUS_SIGN : "+" >
|   < MINUS_SIGN : "-" > 
|   < NEGATION : "~" >
|   < OR : "|" >
|   < AND : "&" >
|   < EQUALS : "=" >
|   < NOT_EQUALS : "!=" >
|   < LESS_THEN : "<" > 
|   < GRT_THEN : ">" >
|   < LESS_EQUAL : "<=" >
|   < GRT_EQUAL : ">=" >

}



TOKEN : /* Integers and Identifiers */
{
  < INTEGERS : "0" | ((<MINUS_SIGN>)? <NEGATIVE_DIGITS> (<DIGITS>)*)>
| < #DIGITS : ["0" - "9"] >
| < #NEGATIVE_DIGITS : ["1" - "9"] > 
| < IDENTIFIER : <LETTER> (<LETTER> | <DIGITS> | "_")* >
| < #LETTER : ["a" - "z", "A" - "Z"] >
}



TOKEN : /* Not recongnised */ 
{
    
  < OTHER : ~[] >

}
 


/*****PRODUCTION RULES********/

/*1*/ 

SimpleNode program()       : {/*@bgen(jjtree) Prog */
  Prog jjtn000 = new Prog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Prog */
    try {
/*@egen*/
    DeclList()
    FuncList()
    Main() [<EOF>]/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/ //NOT STATED IF NEEDED ADDED INCASE
     {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DeclList() : {}
{
    Decl() <SEMI_COLON> DeclList()
  | {}
}

void Decl() : {}
{
    VarDecl()
  | ConstDecl()
}

void VarDecl()          : {/*@bgen(jjtree) VarDecl */
                           VarDecl jjtn000 = new VarDecl(JJTVARDECL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) VarDecl */
    try {
/*@egen*/
    t = <VARIABLE> id = Identifier() <COLON> type = Type()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {SymbolTable.add("Variable",id, type,scope);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  //Add variable to SymbolTable 
}

void ConstDecl()            : {/*@bgen(jjtree) ConstDecl */
                               ConstDecl jjtn000 = new ConstDecl(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) ConstDecl */
    try {
/*@egen*/
    t = <CONSTANT> id = Identifier() <COLON> type = Type() ConstAssign()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {SymbolTable.add("Constant",id, type,scope);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void ConstAssign() : {Token t;}
{
    t = <ASSIGNMENT> Expr()/*@bgen(jjtree) #ConstAssign(> 1) */
                            {
                              ConstAssign jjtn001 = new ConstAssign(JJTCONSTASSIGN);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                              }
                            }
/*@egen*/                 
}

void FuncList() : {}
{
    [Func() FuncList()]
}

void Func()       : {/*@bgen(jjtree) Func */
                     Func jjtn000 = new Func(JJTFUNC);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;}
{/*@bgen(jjtree) Func */
 try {
/*@egen*//*@bgen(jjtree) #FuncRet( 1) */
 {
   FuncRet jjtn001 = new FuncRet(JJTFUNCRET);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (type = Type() id = Identifier() {scope=id;}{SymbolTable.add("Function",id, type,id);SymbolTable.add("Function",id, type,"Global");}
<LBR>  ParamList() {SymbolTable.addFunctionParameterCount(id,FunctionParameterCount);FunctionParameterCount = 0;}<RBR>  <IS>  DeclList() <BEGIN> StmBlk()  <RETURN> <LBR> [Expr() ] <RBR> <SEMI_COLON>  <END>  )/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  1);
   }
 }
/*@egen*/            /*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}



void ParamList()            : {/*@bgen(jjtree) ParamList */
  ParamList jjtn000 = new ParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParamList */
    try {
/*@egen*/
    [NempParamList()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NempParamList()                : {/*@bgen(jjtree) NempParamList */
                                       NempParamList jjtn000 = new NempParamList(JJTNEMPPARAMLIST);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;Token t;}
{/*@bgen(jjtree) NempParamList */
    try {
/*@egen*/
    (id = Identifier() <COLON> type = Type() NempParamListPrime())/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {SymbolTable.add("Parameter",id, type,scope);FunctionParameterCount++;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NempParamListPrime() : {}
{
    [<COMMA> NempParamList()] 
}

void Main()       : {/*@bgen(jjtree) Main */
                     Main jjtn000 = new Main(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    {scope = "Main";} t = <MAIN> <BEGIN> DeclList() StmBlk() <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StmBlk() : {}
{
    Stm() StmBlk()
  | {}
}
void Stm() : {Token t;String id;}
{
    (id = Identifier() (/*@bgen(jjtree) #Assign( 2) */
                        {
                          Assign jjtn001 = new Assign(JJTASSIGN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/(t = <ASSIGNMENT> Expr() <SEMI_COLON>/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn001,  2);
                                                                jjtc001 = false;
                                                              }
/*@egen*/ {jjtn001.value = t.image;})/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/           |  (t= <LBR> ArgList()  <RBR> <SEMI_COLON> ))) 
  | (<BEGIN> StmBlk() <BEGIN>)
  |/*@bgen(jjtree) If */
    {
      If jjtn003 = new If(JJTIF);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ (t =  <IF>  Cond() <BEGIN> StmBlk()/*@bgen(jjtree) Else */
                                        {
                                          Else jjtn002 = new Else(JJTELSE);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*/ <END>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
                                        }
/*@egen*/        <ELSE> <BEGIN> StmBlk() <END>/*@bgen(jjtree)*/
                                                                                   {
                                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                                     jjtc003 = false;
                                                                                   }
/*@egen*/ {jjtn003.value = t.image;})/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/    
  |/*@bgen(jjtree) While */
    {
      While jjtn004 = new While(JJTWHILE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/ (t = <WHILE>  Cond() <BEGIN> StmBlk() <END>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn004, true);
                                                  jjtc004 = false;
                                                }
/*@egen*/ {jjtn004.value = t.image;})/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/       
  | (<SKP> <SEMI_COLON>)
}




void Expr() : {}
{
    (Frag() Term())  
  | (<LBR> Expr() <RBR> Term()) 
}

void Term() : {Token t;}
{
    t = <PLUS_SIGN> Expr()/*@bgen(jjtree) #PlusOp( 2) */
                           {
                             PlusOp jjtn001 = new PlusOp(JJTPLUSOP);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtc001 = false;
                           }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/           
  | t = <MINUS_SIGN> Expr()/*@bgen(jjtree) #MinOp( 2) */
                            {
                              MinOp jjtn002 = new MinOp(JJTMINOP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
                            }
/*@egen*/          
  | {}
}

void Frag() : {String id;}
{
    (id = Identifier() [<LBR> ArgList() <RBR>]  )
  | (<MINUS_SIGN> Identifier())
  | Num()
  | Bool()
}

void Num()      : {/*@bgen(jjtree) Num */
                   Num jjtn000 = new Num(JJTNUM);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Num */
    try {
/*@egen*/
    t = <INTEGERS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bool()       : {/*@bgen(jjtree) Bool */
                     Bool jjtn000 = new Bool(JJTBOOL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Bool */
    try {
/*@egen*/
    (t = <TRUE> | t = <FALSE>)/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Cond() : {}
{
    (<NEGATION> Cond() CondPrime())
  | LOOKAHEAD(3) (<LBR> Cond() <RBR> CondPrime())
  | (Expr() CompOp() CondPrime())
}

void CondPrime() : {Token t;}
{
    t = <OR> Cond()/*@bgen(jjtree) #OrOp( 2) */
                    {
                      OrOp jjtn001 = new OrOp(JJTOROP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/         
  | t = <AND> Cond()/*@bgen(jjtree) #AndOp( 2) */
                     {
                       AndOp jjtn002 = new AndOp(JJTANDOP);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/           
  | {}
}

void CompOp() : {Token t;}
{
    t = <EQUALS> Expr()/*@bgen(jjtree) #EqOp( 2) */
                        {
                          EqOp jjtn001 = new EqOp(JJTEQOP);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtc001 = false;
                        }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/         
  | t = <NOT_EQUALS> Expr()/*@bgen(jjtree) #NotOp( 2) */
                            {
                              NotOp jjtn002 = new NotOp(JJTNOTOP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
                            }
/*@egen*/          
  | t = <LESS_THEN> Expr()/*@bgen(jjtree) #LtOp( 2) */
                           {
                             LtOp jjtn003 = new LtOp(JJTLTOP);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn003,  2);
                             jjtc003 = false;
                           }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003,  2);
                             }
                           }
/*@egen*/         
  | t = <LESS_EQUAL> Expr()/*@bgen(jjtree) #LtEqOp( 2) */
                            {
                              LtEqOp jjtn004 = new LtEqOp(JJTLTEQOP);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn004,  2);
                              jjtc004 = false;
                            }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004,  2);
                              }
                            }
/*@egen*/           
  | t = <GRT_THEN> Expr()/*@bgen(jjtree) #GtOp( 2) */
                          {
                            GtOp jjtn005 = new GtOp(JJTGTOP);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn005,  2);
                            jjtc005 = false;
                          }
/*@egen*/ {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005,  2);
                            }
                          }
/*@egen*/         
  | t = <GRT_EQUAL> Expr()/*@bgen(jjtree) #GtEqOp( 2) */
                           {
                             GtEqOp jjtn006 = new GtEqOp(JJTGTEQOP);
                             boolean jjtc006 = true;
                             jjtree.openNodeScope(jjtn006);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn006,  2);
                             jjtc006 = false;
                           }
/*@egen*/ {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc006) {
                               jjtree.closeNodeScope(jjtn006,  2);
                             }
                           }
/*@egen*/           
}

void ArgList()          : {/*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    [NempArgList()  ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void NempArgList()    : {}
{/*@bgen(jjtree) #ArgList(> 1) */
      {
        ArgList jjtn001 = new ArgList(JJTARGLIST);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        }
      }
/*@egen*/                [<COMMA> NempArgList() ] 
}

String Identifier()             : {/*@bgen(jjtree) identifier */
                                   identifier jjtn000 = new identifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Type()       : {/*@bgen(jjtree) type */
                       type jjtn000 = new type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  ( t = <INTEGER> 
  | t = <BOOLEAN>
  | t = <VOID>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
